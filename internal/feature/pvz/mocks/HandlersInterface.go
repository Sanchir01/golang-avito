// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	pvz "github.com/Sanchir01/golang-avito/internal/feature/pvz"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// HandlersInterface is an autogenerated mock type for the HandlersInterface type
type HandlersInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, createdDate, city
func (_m *HandlersInterface) Create(ctx context.Context, createdDate time.Time, city string) (*pvz.DBPVZ, error) {
	ret := _m.Called(ctx, createdDate, city)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *pvz.DBPVZ
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, string) (*pvz.DBPVZ, error)); ok {
		return rf(ctx, createdDate, city)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, string) *pvz.DBPVZ); ok {
		r0 = rf(ctx, createdDate, city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pvz.DBPVZ)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, string) error); ok {
		r1 = rf(ctx, createdDate, city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPVZService provides a mock function with given fields: ctx, startDate, endDate, page, limit
func (_m *HandlersInterface) GetAllPVZService(ctx context.Context, startDate time.Time, endDate time.Time, page uint64, limit uint64) ([]*pvz.DBPVZWithReceptions, error) {
	ret := _m.Called(ctx, startDate, endDate, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPVZService")
	}

	var r0 []*pvz.DBPVZWithReceptions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, uint64, uint64) ([]*pvz.DBPVZWithReceptions, error)); ok {
		return rf(ctx, startDate, endDate, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, uint64, uint64) []*pvz.DBPVZWithReceptions); ok {
		r0 = rf(ctx, startDate, endDate, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pvz.DBPVZWithReceptions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time, uint64, uint64) error); ok {
		r1 = rf(ctx, startDate, endDate, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHandlersInterface creates a new instance of HandlersInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlersInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlersInterface {
	mock := &HandlersInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
