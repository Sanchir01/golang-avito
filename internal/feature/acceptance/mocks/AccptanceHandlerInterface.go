// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	acceptance "github.com/Sanchir01/golang-avito/internal/feature/acceptance"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AccptanceHandlerInterface is an autogenerated mock type for the AccptanceHandlerInterface type
type AccptanceHandlerInterface struct {
	mock.Mock
}

// CloseLastAcceptance provides a mock function with given fields: ctx, pvzID
func (_m *AccptanceHandlerInterface) CloseLastAcceptance(ctx context.Context, pvzID uuid.UUID) (*acceptance.DBAcceptance, error) {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for CloseLastAcceptance")
	}

	var r0 *acceptance.DBAcceptance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*acceptance.DBAcceptance, error)); ok {
		return rf(ctx, pvzID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *acceptance.DBAcceptance); ok {
		r0 = rf(ctx, pvzID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acceptance.DBAcceptance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAcceptanceService provides a mock function with given fields: ctx, pvzId
func (_m *AccptanceHandlerInterface) CreateAcceptanceService(ctx context.Context, pvzId uuid.UUID) (*acceptance.DBAcceptance, error) {
	ret := _m.Called(ctx, pvzId)

	if len(ret) == 0 {
		panic("no return value specified for CreateAcceptanceService")
	}

	var r0 *acceptance.DBAcceptance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*acceptance.DBAcceptance, error)); ok {
		return rf(ctx, pvzId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *acceptance.DBAcceptance); ok {
		r0 = rf(ctx, pvzId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acceptance.DBAcceptance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, pvzId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccptanceHandlerInterface creates a new instance of AccptanceHandlerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccptanceHandlerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccptanceHandlerInterface {
	mock := &AccptanceHandlerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
