// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	product "github.com/Sanchir01/golang-avito/internal/feature/product"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// HandlerProducts is an autogenerated mock type for the HandlerProducts type
type HandlerProducts struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: ctx, acceptionID, typeProduct
func (_m *HandlerProducts) CreateProduct(ctx context.Context, acceptionID uuid.UUID, typeProduct string) (*product.DBProduct, error) {
	ret := _m.Called(ctx, acceptionID, typeProduct)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *product.DBProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (*product.DBProduct, error)); ok {
		return rf(ctx, acceptionID, typeProduct)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *product.DBProduct); ok {
		r0 = rf(ctx, acceptionID, typeProduct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.DBProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, acceptionID, typeProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLastProductService provides a mock function with given fields: ctx, AcceptionID
func (_m *HandlerProducts) DeleteLastProductService(ctx context.Context, AcceptionID uuid.UUID) error {
	ret := _m.Called(ctx, AcceptionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLastProductService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, AcceptionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHandlerProducts creates a new instance of HandlerProducts. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerProducts(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlerProducts {
	mock := &HandlerProducts{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
